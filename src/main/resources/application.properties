# view resolver
# spring.mvc.view.prefix=/WEB-INF/templates/
# spring.mvc.view.suffix=.jsp

spring.thymeleaf.cache=false
#spring.thymeleaf.mode=HTML5
#spring.thymeleaf.cache=false
#spring.thymeleaf.templates_root=src/main/resources/templates/
#spring.thymeleaf.templates_root=src/main/webapp/WEB-INF/templates/

# INTERNATIONALIZATION
#\u8bbe\u7f6e\u56fd\u9645\u5316\u914d\u7f6e\u6587\u4ef6\u5b58\u653e\u5728classpath:/i18n\u76ee\u5f55\u4e0b
spring.messages.basename=i18n/messages
#\u8bbe\u7f6e\u52a0\u8f7d\u8d44\u6e90\u7684\u7f13\u5b58\u5931\u6548\u65f6\u95f4\uff0c-1\u8868\u793a\u6c38\u4e45\u6709\u6548\uff0c\u9ed8\u8ba4\u4e3a-1
spring.messages.cache-seconds=3600
#\u8bbe\u5b9amessage bundles\u7f16\u7801\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u4e3aUTF-8
#spring.messages.encoding=UTF-8

# DataSource settings: set here your own configurations for the database 
# connection. In this example we have "netgloo_blog" as database name and 
# "root" as username and password.
spring.datasource.url = jdbc:mysql://localhost:3306/springmvc_hibernate
spring.datasource.username = root
spring.datasource.password = 000000

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect